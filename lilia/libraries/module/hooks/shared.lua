
local GM = GM or GAMEMODE

function GM:ModuleShouldNotLoad(module)
    local uniqueID = module.uniqueID
    local isEnabled = module.enabled
    local identifier = module.identifier
    local reason
    if isEnabled == false then
        reason = "Module '" .. uniqueID .. "' is disabled. Deactivating Module!"
        return true, reason
    end

    if identifier == "" and uniqueID ~= "schema" then
        reason = "Module '" .. uniqueID .. "' doesn't have an identifier. Deactivating Module!"
        return true, reason
    end

    for moduleName, conditions in pairs(lia.module.ModuleConditions) do
        if uniqueID == moduleName then
            local moduleVarPresent = _G[conditions.global] == true
            if not moduleVarPresent then
                return true
            else
                print("Module '" .. uniqueID .. "' requires the global variable '" .. conditions.global .. "', which is present. Enabling Module!")
            end
        end
    end
    return false
end


function GM:ModuleLoaded(uniqueID, module)
    if uniqueID == "schema" then return end
    if module.identifier ~= "" then _G[module.identifier] = module end
    PrintTable(_G[module.identifier], 1)
end


function GM:LiliaLoaded()
    local namecache = {}
    for _, MODULE in pairs(lia.module.list) do
        local authorID = (tonumber(MODULE.author) and tostring(MODULE.author)) or (string.match(MODULE.author, "STEAM_") and util.SteamIDTo64(MODULE.author)) or nil
        if authorID then
            if namecache[authorID] ~= nil then
                MODULE.author = namecache[authorID]
            else
                steamworks.RequestPlayerInfo(
                    authorID,
                    function(newName)
                        namecache[authorID] = newName
                        MODULE.author = newName or MODULE.author
                    end
                )
            end
        end
    end

    lia.module.namecache = namecache
end

