
local MODULE = MODULE
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function MODULE:OnPlayerDropWeapon(_, _, entity)
    local physObject = entity:GetPhysicsObject()
    if physObject then
        physObject:EnableMotion()
    end

    timer.Simple(
        MODULE.TimeUntilDroppedSWEPRemoved,
        function()
            if entity and entity:IsValid() then
                entity:Remove()
            end
        end
    )
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function MODULE:EntityTakeDamage(entity, dmgInfo)
    local inflictor = dmgInfo:GetInflictor()
    local attacker = dmgInfo:GetAttacker()
    local validClient = IsValid(entity) and entity:IsPlayer()
    local validAttacker = IsValid(attacker) and attacker:IsPlayer()
    local notSameAttackerAsEnt = attacker ~= entity and dmgInfo:IsFallDamage()
    local infIsProp = inflictor and IsValid(inflictor) and inflictor:isProp()
    if not (validAttacker and validClient) then return end
    if infIsProp then
        dmgInfo:SetDamage(0)
    end

    if notSameAttackerAsEnt and not entity:isStaffOnDuty() then
        entity.LastDamaged = CurTime()
    end

    if MODULE.CarRagdoll and IsValid(inflictor) and (inflictor:GetClass() == "gmod_sent_vehicle_fphysics_base" or inflictor:GetClass() == "gmod_sent_vehicle_fphysics_wheel") and not IsValid(entity:GetVehicle()) then
        dmgInfo:ScaleDamage(0)
        if not IsValid(entity.liaRagdoll) then
            entity:setRagdolled(true, 5)
        end
    end
end

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
function MODULE:CanPlayerSwitchChar(client, character)
    if not client:isStaffOnDuty() then
        if MODULE.OnDamageCharacterSwitchCooldown and client.LastDamaged and client.LastDamaged > CurTime() - MODULE.OnDamageCharacterSwitchCooldownTimer then return false, "You took damage too recently to switch characters!" end
        if MODULE.CharacterSwitchCooldown and (character:getData("loginTime", 0) + MODULE.CharacterSwitchCooldownTimer) > os.time() then return false, "You are on cooldown!" end
    end

    return true
end
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------